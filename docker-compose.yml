services:
  postgres:
    image: postgres:${POSTGRES_VERSION}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
      interval: 5s
      timeout: 5s
      retries: 5

  migrate:
    build:
      context: .
      dockerfile: Dockerfile.migrate
      args:
        NODE_VERSION: ${NODE_VERSION}
        PNPM_VERSION: ${PNPM_VERSION}
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL}
    command: pnpm --filter @contexthub/database db:deploy

  web:
    build:
      context: .
      dockerfile: Dockerfile.web
      args:
        NODE_VERSION: ${NODE_VERSION}
        PNPM_VERSION: ${PNPM_VERSION}
        WEB_PORT: ${WEB_PORT}
    ports:
      - '${WEB_PORT}:${WEB_PORT}'
    depends_on:
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: ${DATABASE_URL}
      NODE_ENV: ${NODE_ENV}
      PORT: ${WEB_PORT}
    command: pnpm --filter @contexthub/web start

  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile.mcp-server
      args:
        NODE_VERSION: ${NODE_VERSION}
        PNPM_VERSION: ${PNPM_VERSION}
        MCP_SERVER_PORT: ${MCP_SERVER_PORT}
    ports:
      - '${MCP_SERVER_PORT}:${MCP_SERVER_PORT}'
    depends_on:
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: ${DATABASE_URL}
      NODE_ENV: ${NODE_ENV}
      PORT: ${MCP_SERVER_PORT}
    command: pnpm --filter @contexthub/mcp-server start

  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
      args:
        NODE_VERSION: ${NODE_VERSION}
        PNPM_VERSION: ${PNPM_VERSION}
    depends_on:
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: ${DATABASE_URL}
      NODE_ENV: ${NODE_ENV}
      WORKER_QUEUE: ${WORKER_QUEUE}
      WORKER_POLL_INTERVAL_MS: ${WORKER_POLL_INTERVAL_MS}
    command: pnpm --filter @contexthub/worker start

volumes:
  postgres_data:
